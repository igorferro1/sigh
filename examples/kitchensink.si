// This file showcases every single syntactic feature in the language.

fun array_add (a: Int[]): Int
{
    fun add (a: Int, b: Int): Int {
        return add2(a, b) // works!

        fun add2 (a: Int, b: Int): Int {
            return a + b
        }
    }

    if (a.length == 0)
        return 0

    var i: Int = 1
    var result: Int = a[0]

    while i < a.length {
        result = add(result, a[i])
        i = i + 1
    }

    return result
}

template <T: Type> fun addadsads(a: T, b: T): T { return a }


var total: Int = array_add([1, 2, 3])
var float_total: Float = total + 0.0

var math: Int = 1 + 3 * 4 * (1 + 3) / 12
validate5(math)
validate5(6) // some men just want to watch the world burn

fun validate5 (value: Int)
{
    if (value!= 5)
        print("We wanted 5 but got: " + value)

    if (value > 5)
        print("It was too big.")
    else if (value < 5)
        print("It was too small.")
    else
        print("It's just right.")
}

struct Pair {
    var a: Int
    var b: Int
}

var type: Type = Pair
print("" + type)

fun sum_pair (pair: Pair): Int {
    return pair.a + pair.b
}

validate5(sum_pair($Pair(2, 3)))

fun use_array (array: Int[]) {}

var intArray: Int[] = [99, 21]
var intArray2: Int[] = [3, 4]
var floatArray: Float[] = [99.9, 21]
var resultArray1: Int[] = intArray + intArray2
var resultArray2: Int[] = intArray - intArray2
var resultArray3: Int[] = intArray * intArray2
var resultArray4: Float[] = floatArray / intArray2
var resultArray5: Int[] = intArray + 5
var resultArray6: Int[] = intArray - 5
var resultArray7: Int[] = intArray * 5
var resultArray8: Float[] = intArray / 5
print("" + resultArray1)
print("" + resultArray2)
print("" + resultArray3)
print("" + resultArray4)
print("" + resultArray5)
print("" + resultArray6)
print("" + resultArray7)
print("" + resultArray8)
var stringArray: String[] = []
use_array([])

var testSet: Float{} = {}
print("" + testSet)
testSet = addSetFloat({1, 3}, 2)
testSet = addSetFloat(testSet, 2)
testSet = addSetFloat(testSet, 5)
print("" + testSet)
print("" + containsSetFloat(testSet, 3))